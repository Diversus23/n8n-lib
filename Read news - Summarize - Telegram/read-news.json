{
  "name": "Поиск идей для блога Код ИТ-директора",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1,
                2,
                3,
                4,
                5
              ],
              "triggerAtHour": 7,
              "triggerAtMinute": 30
            },
            {
              "field": "weeks",
              "triggerAtDay": [
                6,
                0
              ],
              "triggerAtHour": 9
            },
            {
              "triggerAtHour": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -720,
        448
      ],
      "id": "5217d0e3-418e-4f2b-9f28-84ad1fa2670d",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "const rss = [\n  { name: \"Hacker News\", url: \"https://news.ycombinator.com/rss\", weight: 1.0 },\n  { name: \"Reddit Tech\", url: \"https://www.reddit.com/r/technology/hot/.rss\", weight: 1.0 },\n  { name: \"Habr\", url: \"https://habr.com/ru/rss/hubs/all/\", weight: 1.0 },\n  { name: \"Arc\", url: \"https://arstechnica.com/information-technology/feed/\", weight: 1.0},\n  { name: \"Hackernoon\", url: \"https://hackernoon.com/tagged/programming/feed\", weight: 1.0},\n  { name: \"TechCrunch\", url: \"https://techcrunch.com/feed/\", weight: 1.0},\n  { name: \"Reddit Self Hosted\", \"url\": \"https://www.reddit.com/r/selfhosted.rss\", weight: 1.2},\n  { name: \"Reddit SysAdmin\", url: \"https://www.reddit.com/r/sysadmin.rss\", weight: 0.95},\n  { name: \"Open source\", url: \"https://opensource.com/feed\", weight: 1.1},\n  { name: \"AI Trends\", url: \"https://www.aitrends.com/feed/\", weight: 1.0}\n];\n\nconst keywords = {\n  'positive': [\n  // --- Управление и стратегия ---\n  'it management', 'team management', 'leadership', 'hiring', 'recruitment', 'onboarding', 'tech debt', 'total cost of ownership', 'tco', 'it budget', 'sla', 'project management', 'agile', 'scrum', 'kanban', 'postmortem', 'case study', 'lessons learned', 'failure', 'it strategy',\n\n  // --- Технологии и архитектура ---\n  '1c', '1с', 'postgresql', 'mssql', 'database', 'sql', 'linux', 'server', 'virtualization', 'vmware', 'proxmox', 'docker', 'kubernetes', 'containerization', 'system architecture', 'system design', 'microservices', 'monolith', 'high availability', 'scalability', 'performance',\n\n  // --- Безопасность ---\n  'security', 'cybersecurity', 'infosec', 'vulnerability', 'data breach', 'compliance', 'backup', 'disaster recovery', 'pentest', 'firewall',\n\n  // --- DevOps и автоматизация ---\n  'devops', 'ci/cd', 'automation', 'scripting', 'powershell', 'bash', 'python', 'api', 'ansible', 'terraform', 'infrastructure as code', 'iac',\n\n  // --- Инструменты и ПО ---\n  'open source', 'open-source', 'self-hosted', 'monitoring', 'zabbix', 'prometheus', 'grafana', 'github', 'gitlab', 'tool', 'software',\n\n  // --- AI / ML (прикладной аспект) ---\n  'ai', 'ml', 'machine learning', 'llm', 'openai', 'chatgpt', 'gemini', 'anthropic', 'openrouter', 'rag', 'fine-tuning'\n],\n  'negative': [\n  // --- Хайп и нерелевантные финансы ---\n  'crypto', 'cryptocurrency', 'bitcoin', 'nft', 'blockchain', 'web3', 'metaverse', 'startup funding', 'venture capital', 'investment',\n\n  // --- Маркетинг и продажи ---\n  'marketing', 'sales', 'seo', 'growth hacking', 'e-commerce', 'influencer',\n\n  // --- Потребительская электроника и развлечения ---\n  'gaming', 'game development', 'gamedev', 'console', 'playstation', 'xbox', 'iphone', 'android', 'gadget', 'review', 'wearable', 'smart home', 'film', 'movie', 'tv series', 'music', 'artwork', 'hollywood',\n\n  // --- Общие новости и политика ---\n  'politics', 'government', 'election', 'trump', 'biden',\n\n  // --- Узкоспециализированные или академические темы ---\n  'ocaml', 'haskell', 'lisp', 'erlang', 'quantum computing', 'research paper', 'academic',\n\n  // --- Нецелевое ПО и темы ---\n  'driver', 'ffmpeg', 'medical', 'healthcare', 'biology', 'geographical', 'social media', 'Microsoft 365', 'Windows 11', 'dovecot', 'cloudflare',\n\n    // --- на русском\n     'казино', 'криптовалюты', 'биткоин', 'игры', 'продажи', 'маркетинг', 'фильм', 'драйвер', 'фьючерс'\n]\n};\n\nconst incomingItems = $items();\nconst processedUrls = incomingItems.length > 0 ? incomingItems[0].json.processedUrls : [];\n\n// Возвращаем объект, который будет доступен в следующих узлах\nreturn [{\n  sources: rss,\n  filters: keywords,\n  processedUrls: processedUrls\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        448
      ],
      "id": "2609a194-f642-48b2-b2d6-f372b7f41d4a",
      "name": "Source List / Positive & Negative words"
    },
    {
      "parameters": {
        "fieldToSplitOut": "sources",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        112,
        352
      ],
      "id": "0a30ecbf-3e9a-4a62-bed1-524df7f8377f",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "// Берём negative из узла с названием \"Source List / Positive & Negative words\"\nconst negatives = ($('Source List / Positive & Negative words').first().json.filters.negative ?? []\n)\n  .map(s => String(s).trim().toLowerCase())\n  .filter(Boolean); // убрать пустые\n\n// Отфильтровываем RSS-элементы: исключаем, если найдена хоть одна \"негативка\"\nreturn $input.all().filter(item => {\n  const title = (item.json.title || '').toLowerCase();\n  const content = (item.json.content || item.json.contentSnippet || '').toLowerCase();\n  const haystack = `${title} ${content}`;\n\n  const hasNegative = negatives.some(word => haystack.includes(word));\n  return !hasNegative; // оставить только записи без негативных слов\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        224
      ],
      "id": "b391abaa-ca3a-4cf5-8c77-17e8bc13b25d",
      "name": "Remove negative news"
    },
    {
      "parameters": {
        "jsCode": "// --- КОНФИГУРАЦИЯ ---\n// Порог схожести (0.85 = 85%). Если заголовки похожи на 85% или больше, они считаются дублями.\n// Вы можете изменять это значение от 0.0 до 1.0 для настройки чувствительности.\nconst SIMILARITY_THRESHOLD = 0.8;\n\n// --- ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ (не трогать) ---\n\n/**\n * Нормализует заголовок: приводит к нижнему регистру и удаляет все не-буквы и не-цифры.\n * @param {string} title - Исходный заголовок.\n * @returns {string} - Нормализованный заголовок.\n */\nfunction normalizeTitle(title) {\n  if (!title || typeof title !== 'string') {\n    return '';\n  }\n  return title.toLowerCase().replace(/[\\W_]/g, '');\n}\n\n/**\n * Вычисляет расстояние Левенштейна между двумя строками.\n * @param {string} s1 - Первая строка.\n * @param {string} s2 - Вторая строка.\n * @returns {number} - Расстояние Левенштейна.\n */\nfunction levenshteinDistance(s1, s2) {\n  const track = Array(s2.length + 1).fill(null).map(() => Array(s1.length + 1).fill(null));\n  for (let i = 0; i <= s1.length; i += 1) {\n    track[0][i] = i;\n  }\n  for (let j = 0; j <= s2.length; j += 1) {\n    track[j][0] = j;\n  }\n  for (let j = 1; j <= s2.length; j += 1) {\n    for (let i = 1; i <= s1.length; i += 1) {\n      const indicator = s1[i - 1] === s2[j - 1] ? 0 : 1;\n      track[j][i] = Math.min(\n        track[j][i - 1] + 1, // deletion\n        track[j - 1][i] + 1, // insertion\n        track[j - 1][i - 1] + indicator, // substitution\n      );\n    }\n  }\n  return track[s2.length][s1.length];\n}\n\n/**\n * Вычисляет процент схожести двух строк на основе расстояния Левенштейна.\n * @param {string} s1 - Первая строка.\n * @param {string} s2 - Вторая строка.\n * @returns {number} - Схожесть от 0.0 до 1.0.\n */\nfunction calculateSimilarity(s1, s2) {\n  if (!s1 || !s2) return 0;\n  const maxLength = Math.max(s1.length, s2.length);\n  if (maxLength === 0) return 1;\n  const distance = levenshteinDistance(s1, s2);\n  return (maxLength - distance) / maxLength;\n}\n\n\n// --- ОСНОВНАЯ ЛОГИКА ---\n\n// Получаем все входящие элементы (статьи)\nconst items = $input.all();\n\nconst uniqueArticles = [];\n\n// Цикл по всем полученным статьям\nfor (const currentItem of items) {\n  let isDuplicate = false;\n  // Убедимся, что заголовок существует, прежде чем его нормализовать\n  const currentTitle = currentItem.json.title ? normalizeTitle(currentItem.json.title) : '';\n\n  // Сравниваем текущую статью со всеми, что мы уже добавили в список уникальных\n  for (const uniqueArticle of uniqueArticles) {\n    const uniqueTitle = uniqueArticle.json.normalizedTitle || normalizeTitle(uniqueArticle.json.title);\n    const similarity = calculateSimilarity(currentTitle, uniqueTitle);\n\n    if (similarity >= SIMILARITY_THRESHOLD) {\n      isDuplicate = true;\n      break; // Нашли дубликат, нет смысла проверять дальше\n    }\n  }\n\n  // Если после всех проверок дубликат не найден, добавляем статью в список уникальных\n  if (!isDuplicate) {\n    // Сохраняем нормализованный заголовок, чтобы не вычислять его снова\n    currentItem.json.normalizedTitle = currentTitle;\n    uniqueArticles.push(currentItem);\n  }\n}\n\n// Возвращаем отфильтрованный массив уникальных статей. n8n автоматически\n// создаст из этого массива поток отдельных элементов для следующих узлов.\nreturn uniqueArticles;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        224
      ],
      "id": "23b183e1-eec6-473e-9dea-5fd1380a15db",
      "name": "Normalize"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        736,
        656
      ],
      "id": "f6bb8656-98a0-4b37-9b8f-935823c19df8",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const configNode = $items('Source List / Positive & Negative words')[0];\n\n// Берём negative-слова, приводим к нижнему регистру и убираем пустые строки.\nconst negatives = (configNode.json.filters.negative ?? [])\n  .map(s => String(s).trim().toLowerCase())\n  .filter(Boolean);\n\n// Берём массив уже обработанных URL.\nconst processedUrls = new Set(configNode.json.processedUrls ?? []);\n\n// Отфильтровываем RSS-элементы: исключаем, если найдена хоть одна \"негативка\"\nreturn $input.all().filter(item => {\n  const title = (item.json.title || '').toLowerCase();\n  const content = (item.json.content || item.json.contentSnippet || '').toLowerCase();\n  const haystack = `${title} ${content}`;\n\n  const hasNegative = negatives.some(word => haystack.includes(word));\n\n  // --- ПРОВЕРКА 2: на наличие в списке обработанных ---\n  const link = item.json.link || '';\n  const isAlreadyProcessed = processedUrls.has(link);\n  \n  // --- ИТОГОВОЕ РЕШЕНИЕ ---\n  // Статья остается, только если в ней НЕТ негативных слов И она НЕ была обработана ранее.\n  return !hasNegative && !isAlreadyProcessed;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        224
      ],
      "id": "1b48d7c4-2f71-400a-931f-535d5bb8c823",
      "name": "Remove in DB"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "YOUR_NOTION_DATABASE_ID",
          "mode": "list",
          "cachedResultName": "Новости",
          "cachedResultUrl": "https://www.notion.so/24f4d557d3b18059ad55f6da4b12e773"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -512,
        448
      ],
      "id": "e5a13606-3e83-4f9c-9720-4fb9eed83515",
      "name": "Get old links",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "rA4TzoO1vPiM2yaC",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Используем современный синтаксис $items()\nconst items = $items();\n\n// Используем правильный путь к данным из Notion.\n// ЗАМЕНИТЕ 'Link' на название вашей колонки с URL-адресом.\nconst names = items.map(item => \n  item.json.name\n).filter(name => name); // Отфильтровываем пустые значения\n\n// Создаём множество для уникальности и СРАЗУ ЖЕ превращаем обратно в массив\nconst processedUrls = [...new Set(names)];\n\n// Возвращаем объект, содержащий МАССИВ ссылок\nreturn [{ json: { processedUrls: processedUrls } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        448
      ],
      "id": "54e9738d-775a-4183-bac0-4899fcb7ffe7",
      "name": "Save old links",
      "executeOnce": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Ты — прагматичный ассистент ИТ-директора из России. Твоя задача — помочь ему отобрать контент для блога \"Код ИТ-директора\", оценив статью по шкале от 0 до 100.\n\nАудитория блога: ИТ-руководители, тимлиды, сисадмины в РФ.\nГлавное правило: Практическая польза > хайп. Реальный опыт > теория.\n\nКРИТЕРИИ ОЦЕНКИ\n\n* 90-100 (Золото): Новость о новом полезном open-source инструменте, который можно применить на практике. Детальный разбор реального кейса или архитектуры. Практическое руководство по решению сложной IT-проблемы.\n* 70-89 (Серебро): Глубокий анализ важного IT-события и его последствий для бизнеса в РФ. Обзор нового перспективного фреймворка или технологии с примерами.\n* 40-69 (Бронза): Интересная, но не слишком глубокая новость из мира IT. Обзор инструментов без явного кейса применения.\n* 10-39 (Пропустить): Общие новости индустрии без конкретики. Теоретические рассуждения. Новости, актуальные только для западного рынка.\n* 0 (Мусор): Статьи о криптовалютах, играх, маркетинге, \"успешном успехе\", политике.\n\nЗАДАЧА\nПроанализируй title и content.\nid: {{ $json.link }}\ntitle: {{ $json.title }}\ncontent: {{ $json.content }}\nФОРМАТ ОТВЕТА:\nВерни ответ СТРОГО в формате JSON-объектс ключами:\n1. `id`: id\n3. `title`: title на русском\n4. `ai_score`: число от 0 до 100.\n5. `reason`: короткое (1-2 предложения) и честное объяснение, почему поставлена такая оценка, с точки зрения пользы для ИТ-директора на русском.\n\nExample:\n{\n  \"id\": \"https://site.com/pg/\",\n  \"ai_score\": 95,\n  \"title\": \"Новый инструмент для мониторинга Postgres\",\n  \"reason\": \"Это новость о новом open-source инструменте для мониторинга PostgreSQL, который решает реальную проблему. Обязательно к разбору.\"\n}",
        "batching": {
          "batchSize": 50,
          "delayBetweenBatches": 1000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1680,
        656
      ],
      "id": "737309a5-2f1a-49ad-9a0d-bca875c74889",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1680,
        848
      ],
      "id": "9c18542b-b6f3-4d2f-9dd5-f0c82f4eafe5",
      "name": "OpenAI Chat Model",
      "notesInFlow": false,
      "credentials": {
        "openAiApi": {
          "id": "sU9fsLymeiocBC6r",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "maxItems": 30
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        2416,
        656
      ],
      "id": "8a07d686-84e8-42c5-a4cf-39cb98788a4a",
      "name": "Limit 20"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "ai_score",
              "order": "descending"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2240,
        656
      ],
      "id": "62cf2736-f258-4887-8ce7-19b399b77e81",
      "name": "Sort ai_score"
    },
    {
      "parameters": {
        "maxItems": 300
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1408,
        656
      ],
      "id": "3fe12ca5-4f41-49fc-82e0-a0e2a05c3a9b",
      "name": "Limit 300"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "score",
              "order": "descending"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1200,
        656
      ],
      "id": "5bcf9c14-acc1-47ec-9d5f-6e43770f064d",
      "name": "Sort score"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// --- КОНФИГУРАЦИЯ ---\n// Начальное количество баллов для каждой статьи\nconst BASE_SCORE = 10;\n// Сколько баллов добавлять за каждое найденное позитивное слово\nconst POSITIVE_KEYWORD_BONUS = 5;\nconst COMMENT_BONUS_PER_COMMENT = 0.5; // Баллов за каждый комментарий\nconst MAX_COMMENT_BONUS = 25;          // Но не более этого значения\n\n// --- ЛОГИКА ---\n\n// Получаем текущую статью\nconst item = $input.item.json;\n\n// 1. Присваиваем базовый рейтинг\nlet score = BASE_SCORE;\n\n// 2. Умножаем на вес источника, если он есть\nif (item.weight) {\n  score *= item.weight;\n}\n\n// 3. Ищем позитивные слова и начисляем бонусы\nconst positiveKeywords = item.filters.positive || [];\n\n// Собираем весь текст для поиска в одну строку и приводим к нижнему регистру\nconst textToSearch = (\n  (item.title || '') + ' ' + \n  (item.content || '') + ' ' + \n  (item.contentSnippet || '')\n).toLowerCase();\n\n// Проходим по каждому ключевому слову\nfor (const keyword of positiveKeywords) {\n  // Если ключевое слово найдено в тексте, добавляем бонус\n  if (textToSearch.includes(keyword.toLowerCase())) {\n    score += POSITIVE_KEYWORD_BONUS;\n  }\n}\n\n// 4. НОВЫЙ БЛОК: Добавляем баллы за комментарии\nconst commentCount = item.comment_count || 0;\nconst commentBonus = Math.min(commentCount * COMMENT_BONUS_PER_COMMENT, MAX_COMMENT_BONUS);\nscore += commentBonus;\n\n// Записываем итоговый рейтинг в саму статью\nitem.score = score;\n\n// Возвращаем обновленную статью\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        656
      ],
      "id": "13163ee6-afd4-4fa4-9890-f01bcdb08e20",
      "name": "Positive score"
    },
    {
      "parameters": {
        "jsCode": "function escapeHtml(s) {\n  return String(s ?? '')\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n}\n\nfunction escapeAttrUrl(url) {\n  return encodeURI(String(url ?? '')).replace(/\"/g, '&quot;');\n}\n\nconst items = $items();\n\nconst header = '<b>🔥 Топ IT-новостей для анализа:</b>\\n\\n';\n\nconst lines = items.map((item, index) => {\n  const title = escapeHtml(item.json.title);\n  const link = escapeAttrUrl(item.json.id);\n  const score = Math.round(item.json.ai_score || 0);\n  const reason = escapeHtml(item.json.reason);\n\n  return `${index + 1}. <i>[${score}/100]</i> <a href=\"${link}\">${title}</a> — ${reason}`;\n});\n\nconst MAX = 3500;\nconst messages = [];\nlet buf = header;\n\nfor (const line of lines) {\n  if ((buf + '\\n' + line).length > MAX) {\n    messages.push(buf.trim());\n    buf = '';\n  }\n  buf += (buf ? '\\n' : '') + line;\n}\nif (buf) messages.push(buf.trim());\n\nreturn messages.map(html => ({ json: { telegram_message: html } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2624,
        656
      ],
      "id": "c6462183-9f25-4499-8d43-0b561fe5dbee",
      "name": "Summarize",
      "executeOnce": true
    },
    {
      "parameters": {
        "chatId": "YOUR_TELEGRAM_CHAT_ID",
        "text": "={{ $json.telegram_message }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2816,
        656
      ],
      "id": "e7a20cba-97c6-4703-8ddf-c68082f7a998",
      "name": "Send a text message",
      "webhookId": "d3b12fe1-f6fb-465b-a455-4490bb5da89a",
      "credentials": {
        "telegramApi": {
          "id": "6DvFEw6JJb9HJu3i",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "YOUR_NOTION_DATABASE_ID",
          "mode": "list",
          "cachedResultName": "Новости",
          "cachedResultUrl": "https://www.notion.so/24f4d557d3b18059ad55f6da4b12e773"
        },
        "title": "={{ $json.id }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Date|rich_text",
              "textContent": "={{ $now.format('yyyy-MM-dd') }}"
            },
            {
              "key": "Number|number",
              "numberValue": "={{ $json.ai_score }}"
            },
            {
              "key": "Text|rich_text",
              "textContent": "={{ $json.reason }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2048,
        848
      ],
      "id": "5538034f-faa1-43bc-9fe7-2af63c81221b",
      "name": "Save new links",
      "credentials": {
        "notionApi": {
          "id": "rA4TzoO1vPiM2yaC",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "={{ $json.sources.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        304,
        352
      ],
      "id": "6b37754b-9d65-4dbd-9a58-e8e208b5d347",
      "name": "Read RSS",
      "retryOnFail": true,
      "notesInFlow": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ====== НАСТРОЙКИ ======\nconst DELAY_MS = 200;           // Пауза между запросами, чтобы не DDoS-ить\nconst MAX_URLS_PER_ITEM = 20;   // Ограничение числа ссылок на item\nconst TIMEOUT_MS = 15000;\n\n// Универсальные паттерны\nconst COMMENT_REGEXES = [\n  {name: 'en-comments', rx: /(\\d+)\\s*(?:&nbsp;|&#160;|&#xA0;|\\s)*(?:comment|comments)\\b/i},\n  {name: 'ru-kommentarii', rx: /(\\d+)\\s*(?:&nbsp;|&#160;|&#xA0;|\\s)*(?:комментариев|комментария|комментарий)\\b/i},\n  {name: 'class-comment-count', rx: /comment-?count[^>]*>\\s*(\\d+)/i},\n  {name: 'data-comment-count', rx: /data-comment-count=[\"']?(\\d+)/i},\n  {name: 'meta-commentCount', rx: /itemprop=[\"']commentCount[\"'][^>]*content=[\"'](\\d+)[\"']/i},\n  {name: 'aria-label-comments', rx: /aria-label=[\"'][^\"']*?(\\d+)\\s*(?:comment|comments)\\b/i},\n  {name: 'num-comments', rx: /\"num-comments\"[^>]*>\\s*(\\d+)/i},\n  // HN якорная подстраховка\n  {name: 'hn-anchor', rx: /<a[^>]*href=\"item\\?id=\\d+\"[^>]*>\\s*(\\d+)\\s*(?:&nbsp;|&#160;|&#xA0;|\\s)*comments/i},\n];\n\n// ====== ХЕЛПЕРЫ ======\nfunction sleep(ms){ return new Promise(r=>setTimeout(r,ms)); }\n\nfunction extractUrlsFromString(s) {\n  const urls = [];\n  if (!s || typeof s !== 'string') return urls;\n\n  // Прямые URL\n  const urlLike = /(https?:\\/\\/[^\\s\"'<>]+)/gi;\n  let m;\n  while ((m = urlLike.exec(s)) !== null) urls.push(m[1]);\n\n  // href=\"...\" и href='...'\n  const hrefDq = /href\\s*=\\s*\"(.*?)\"/gi;\n  while ((m = hrefDq.exec(s)) !== null) if (m[1]) urls.push(m[1]);\n  const hrefSq = /href\\s*=\\s*'(.*?)'/gi;\n  while ((m = hrefSq.exec(s)) !== null) if (m[1]) urls.push(m[1]);\n\n  return urls;\n}\n\nfunction collectUrlsFromItem(item) {\n  const set = new Set();\n  const j = item.json || {};\n\n  // 1) приоритет — явное поле comments\n  if (typeof j.comments === 'string' && /^https?:\\/\\//i.test(j.comments)) {\n    set.add(j.comments);\n  }\n\n  // 2) остальные строковые поля\n  for (const v of Object.values(j)) {\n    if (typeof v !== 'string') continue;\n    for (const u of extractUrlsFromString(v)) {\n      if (/^https?:\\/\\//i.test(u)) set.add(u);\n    }\n  }\n\n  return Array.from(set).slice(0, MAX_URLS_PER_ITEM);\n}\n\nasync function fetchHtml(url) {\n  try {\n    const res = await $httpClient.get(url, {\n      responseType: 'text',\n      timeout: TIMEOUT_MS,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (n8n; bot)',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',\n      },\n      maxRedirects: 5,\n      validateStatus: s => s >= 200 && s < 400,\n    });\n    return { html: String(res.data || ''), status: res.status };\n  } catch(e) {\n    return { html: null, status: e.response?.status || null, error: e.message };\n  }\n}\n\nfunction tryGeneric(html) {\n  if (!html) return { count: null, matched: null };\n  for (const {name, rx} of COMMENT_REGEXES) {\n    const m = html.match(rx);\n    if (m && m[1]) {\n      const n = parseInt(m[1], 10);\n      if (Number.isFinite(n)) return { count: n, matched: name };\n    }\n  }\n  // HN \"discuss\" => 0 комментов\n  if (/> *discuss *</i.test(html)) return { count: 0, matched: 'hn-discuss-0' };\n  return { count: null, matched: null };\n}\n\nfunction isHN(url) {\n  try {\n    const u = new URL(url);\n    return u.hostname.endsWith('news.ycombinator.com') && u.pathname === '/item';\n  } catch { return false; }\n}\n\nfunction tryHackerNews(html) {\n  // Сначала обычные паттерны\n  const g = tryGeneric(html);\n  if (g.count !== null) return g;\n\n  // Фолбэк: считаем <tr class=\"comtr\">\n  const matches = html ? html.match(/<tr\\s+class=[\"']?comtr\\b/gi) : null;\n  if (matches) return { count: matches.length, matched: 'hn-comtr-count' };\n\n  return { count: null, matched: null };\n}\n\nasync function processItem(item) {\n  const j = item.json || {};\n  j.comment_count = j.comment_count || 0;\n\n  const urls = collectUrlsFromItem(item);\n  const debugUrls = [];\n  let lastStatus = null;\n  let matchedName = null;\n\n  for (const url of urls) {\n    debugUrls.push(url);\n\n    const { html, status } = await fetchHtml(url);\n    lastStatus = status ?? lastStatus;\n\n    let res;\n    if (isHN(url)) {\n      res = tryHackerNews(html);\n    } else {\n      res = tryGeneric(html);\n    }\n\n    if (Number.isInteger(res.count)) {\n      j.comment_count = res.count;\n      j.comment_url_detected = url;\n      matchedName = res.matched;\n      break;\n    }\n\n    await sleep(DELAY_MS);\n  }\n\n  // Всегда пишем отладку, даже если не нашли\n  j._debug_checked_urls = debugUrls;\n  if (lastStatus !== null) j._debug_last_status = lastStatus;\n  if (matchedName) j._debug_matched_regex = matchedName;\n\n  item.json = j;\n  return item;\n}\n\n// ====== ОСНОВА ======\nconst items = $items();\nconst out = [];\nfor (const it of items) {\n  out.push(await processItem(it));\n}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        224
      ],
      "id": "7ea4a159-838f-4a47-8444-f533c2819a41",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e0febce2-ce27-4bb4-a6e5-16ebcfe6bd2f",
              "leftValue": "={{ $json.ai_score }}",
              "rightValue": 40,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2032,
        656
      ],
      "id": "d81e2cda-a8db-4c3e-be8f-4ff31d3ba225",
      "name": "Filter ai_score >= 40"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get old links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Source List / Positive & Negative words": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Read RSS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove negative news": {
      "main": [
        [
          {
            "node": "Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Positive score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove in DB": {
      "main": [
        [
          {
            "node": "Remove negative news",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get old links": {
      "main": [
        [
          {
            "node": "Save old links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save old links": {
      "main": [
        [
          {
            "node": "Source List / Positive & Negative words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Filter ai_score >= 40",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save new links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit 20": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort ai_score": {
      "main": [
        [
          {
            "node": "Limit 20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit 300": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort score": {
      "main": [
        [
          {
            "node": "Limit 300",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Positive score": {
      "main": [
        [
          {
            "node": "Sort score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read RSS": {
      "main": [
        [
          {
            "node": "Remove in DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter ai_score >= 40": {
      "main": [
        [
          {
            "node": "Sort ai_score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save new links": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Moscow",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "0e1a0502-1b23-437c-a7ae-713ff62e160b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7385df13da89f7577631509cd419d14c671f1f37554b01bff11c864db38521f8"
  },
  "id": "BbQSON2jZqqhjJkV",
  "tags": []
}